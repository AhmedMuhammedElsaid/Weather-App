{"version":3,"sources":["Types.js","Logic.js","Store/actions.js","Components/WeatherCard.js","Components/Carousel.js","Components/Toggel.js","Components/BarChart.js","LoadingPage.js","App.js","serviceWorker.js","Store/reducer.js","index.js"],"names":["actionTypes","FETCH_WEATHER_DATA_REQUEST","FETCH_WEATHER_DATA_SUCCESS","FETCH_WEATHER_DATA_FAILURE","GET_SPECIFIC_DAY","TOGGLE_TEMPERATURE_TYPE","constantTimeValue","Date","now","getTimezoneOffset","convertType","val","CvsF","temp","toFixed","fetchWeatherData","dispatch","fetch","then","res","json","data","groupedData","lastIndex","middle","arrData","forEach","itm","i","smallArr","filter","dt","getDay","length","push","slice","OrderData","list","console","log","type","catch","err","toggleAction","WeatherCard","props","date","day","useSelector","state","avTempKelvin","dayData","item","main","getAvrgTemp","avTemp","classes","makeStyles","card","maxWidth","maxHeight","textAlign","borderRadius","margin","color","backgroundColor","border","boxShadow","useStyles","dayName","cardDate","Intl","DateTimeFormat","year","month","format","Card","className","CardActionArea","CardContent","Box","fontWeight","fontSize","style","Container","styled","div","Carousel","useDispatch","cards","map","key","onClick","recentDay","settings","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","Toggel","id","Form","Check","inline","label","name","BarChart","allData","labels","toLocaleTimeString","TemperatureType","datasets","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","BarContainer","width","height","options","legend","display","plugins","datalabels","anchor","align","tooltips","enabled","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","scaleLabel","labelString","xAxes","Loading","Spinner","animation","App","useEffect","Boolean","window","location","hostname","match","initialState","rootReducer","action","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.11c5595f.chunk.js","sourcesContent":["\nconst actionTypes = {\n    FETCH_WEATHER_DATA_REQUEST: \"FETCH_WEATHER_DATA_REQUEST\",\n    FETCH_WEATHER_DATA_SUCCESS: \"FETCH_WEATHER_DATA_SUCCESS\",\n    FETCH_WEATHER_DATA_FAILURE: \"FETCH_WEATHER_DATA_FAILURE\",\n    GET_SPECIFIC_DAY: \"GET_SPECIFIC_DAY\",\n    TOGGLE_TEMPERATURE_TYPE:'TOGGLE_TEMPERATURE_TYPE'\n}\n\nexport default actionTypes","// a constant value to get the right value for the exact time\nconst constantTimeValue = 1000 * 60 * new Date(Date.now()).getTimezoneOffset();\n\n// get the right array of weather data  for a unique day\nfunction findClosestSegmentToNow(data) {\n  return data.find((item) => {\n    const now = Date.now() / 1000;\n    return (\n      Math.abs(item.dt + constantTimeValue / 1000 - now) <=\n      (3 * 60 * 60) / 2\n    );\n  });\n}\n\n//Helper function to order our data according to time because every element within the array has the weather for 3 hours\n// so we just trying to order all of them  to have a big array includes number of arrays each one has the weather for the whole day \nfunction OrderData(data) {\n  const groupedData = [];\n  let lastIndex = -1;\n  let middle = 0;\n  let arrData = data;\n  data.forEach((itm, i) => {\n    if (i < lastIndex + middle) return;\n    const smallArr = arrData.filter(\n      (val) =>\n        new Date(val.dt * 1000).getDay() === new Date(itm.dt * 1000).getDay()\n    );\n    middle = smallArr.length;\n    lastIndex = i;\n    groupedData.push(smallArr);\n    arrData = arrData.slice(middle);\n  });\n\n  return groupedData;\n}\n\n//This functions calculates the average temperature of an array of weather segments\nfunction getAvrgTemp(dayData) {\n  let temp = 0;\n  dayData.forEach((item) => (temp += item.main.temp));\n  return temp / dayData.length;\n}\n//This function converts temoerature to F or C scale\nfunction convertType(val, CvsF) {\n  const temp = val - 273.15;\n  if (CvsF === true) return temp.toFixed(1);\n  return (1.8 * temp + 32).toFixed(1);\n}\n\nexport {\n  findClosestSegmentToNow,\n  OrderData,\n  getAvrgTemp,\n  constantTimeValue,\n  convertType,\n};\n","import actionTypes from \"../Types\";\nimport { OrderData } from \"../Logic\";\n\nlet url =`http://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40`;\n\nexport const fetchWeatherData = () => {\n  return (dispatch) => {\n    fetch(url)\n      .then((res) => {\n        const data = res.json();\n        return data;\n      })\n      .then((res) => {\n        let data = OrderData(res.list);\n        console.log(data);\n        dispatch({\n          type: actionTypes.FETCH_WEATHER_DATA_SUCCESS,\n          data,\n        });\n      })\n      .catch((err) => {\n        dispatch({\n          type: actionTypes.FETCH_WEATHER_DATA_FAILURE,\n        });\n      });\n  };\n};\n\nexport const toggleAction = () => {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.TOGGLE_TEMPERATURE_TYPE });\n  };\n};\n\nexport const getDay = (i) => {\n  return (dispatch) => {\n    dispatch({ type: actionTypes.GET_SPECIFIC_DAY, recentDay: i });\n  };\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport Box from \"@material-ui/core/Box\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { getAvrgTemp, convertType } from \"../Logic\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function WeatherCard(props) {\n  const { date, day } = props;\n  const CvsF = useSelector((state) => state.CvsF);\n  const avTempKelvin = getAvrgTemp(day);\n  const avTemp = `${convertType(avTempKelvin, CvsF)}°${CvsF ? \"C\" : \"F\"}`;\n  const useStyles = makeStyles({\n    card: {\n      maxWidth: 345,\n      maxHeight: 340,\n      textAlign:'center',\n      borderRadius:\"2 30% 2$ 30$%\",\n      margin: \"1%\",\n      color: \"#196090\",\n      backgroundColor: \"rgba(255, 255, 255, 0.4)\",\n      border: \"1px solid rgba(255, 255, 255, 0.6)\",\n      boxShadow: \"5px 5px 5px 0px rgba(0,0,0,0.3)\",\n    },\n  });\n  \n  const weekDays = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const classes = useStyles();\n  const dayName = weekDays[new Date(1000 * date).getDay()];\n  const cardDate = new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"numeric\",\n    day: \"numeric\",\n  }).format(new Date(1000 * date));\n\n  return (\n    <Card className={`main-link ${classes.card}`}>\n      <CardActionArea>\n        <CardContent>\n          <Box fontWeight=\"fontWeightBold\" fontSize={30}>\n            <span style={{ fontSize: \"30px\" }}>Temp:</span>\n            {avTemp}\n          </Box>\n          <div></div>\n          <Box fontWeight=\"fontWeightBold\" fontSize={30}>\n            <span style={{ fontSize: \"30px\" }}>Date:</span>\n            {cardDate}\n          </Box>\n          <Box fontSize={30}>{dayName}</Box>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport WeatherCard from \"./WeatherCard\";\nimport { useDispatch } from \"react-redux\";\nimport Slider from \"react-slick\";\nimport { getDay } from \"../Store/actions\";\n\nconst Container = styled.div`\n  max-width: 75%;\n  @media (max-width: 575.98px){\n    max-width:80%\n  }\n`;\n\nconst Carousel = (props) => {\n  const { data } = props;\n  const dispatch = useDispatch();\n  let cards = data.map((item, i) => {\n    return (\n      <div key={i} onClick={() => dispatch(getDay(i))}>\n        <WeatherCard date={item[0].dt} day={item} />\n      </div>\n    );\n  });\n  const settings = {\n    dots: false,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 3,\n    slidesToScroll: 3,\n    initialSlide: 0,\n    responsive: [\n      {\n        breakpoint: 600,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  };\n  return (\n    <Container>\n      <Slider {...settings}>{cards}</Slider>\n    </Container>\n  );\n};\n\nexport default Carousel;\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleAction } from \"../Store/actions\";\nimport styled from \"styled-components\";\n\nexport default function Toggel() {\n  const CvsF = useSelector((state) => state.CvsF);\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <div id=\"inline-radio\">\n        <Form.Check\n          inline\n          label=\"Celcius\"\n          type=\"radio\"\n          id=\"1\"\n          name=\"temp\"\n          onClick={CvsF ? null : () => dispatch(toggleAction())}\n        />\n        <Form.Check\n          inline\n          label=\"Fahrenheit\"\n          type=\"radio\"\n          id=\"2\"\n          name=\"temp\"\n          onClick={!CvsF ? null : () => dispatch(toggleAction())}\n        />\n      </div>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  max-width: 70%;\n  margin: 100px auto;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-items: center;\n  .form-check {\n    margin-right: 13rem !important;\n    margin-left: 10rem !important;\n  }\n\n  #inline-radio {\n    width: 100%;\n    font-size: 35px;\n    color: #196090;\n    font-weight: 20rem;\n  }\n  input[type=\"radio\"] {\n    transform: scale(2.5);\n    margin-right: 25px;\n  }\n  // Medium devices (tablets, 768px and up)\n  @media (max-width: 575.98px) {\n    #inline-radio {\n      margin-left: -9rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport styled from \"styled-components\";\nimport { convertType, constantTimeValue } from \"../Logic\";\nimport { useSelector } from \"react-redux\";\n\nexport default function BarChart() {\n  const allData = useSelector((state) => state.data);\n  const recentDay = useSelector((state) => state.recentDay);\n  const labels = allData[recentDay].map(\n    (item) => `${new Date(item.dt * 1000 + constantTimeValue).toLocaleTimeString()}`);\n\n  const CvsF = useSelector((state) => state.CvsF);\n\n  const TemperatureType = `Degree in °${CvsF ? \"C\" : \"F\"}`;\n  const chartData = allData[recentDay].map((day) =>\n    convertType(day.main.temp, CvsF)\n  );\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        TemperatureType: \"Temperature across the day\",\n        backgroundColor: \" #be99a9\",\n        borderColor: \"rgba(255, 0, 0, 0.42)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n        hoverBorderColor: \"rgba(255,99,132,1)\",\n        data: chartData,\n      },\n    ],\n  };\n  return (\n    <BarContainer>\n      <Bar\n        data={data}\n        width={120}\n        height={50}\n        options={{\n          legend: {\n            display: false,\n          },\n          plugins: {\n            datalabels: {\n              display: true,\n              color: \"white\",\n              anchor: \"end\",\n              align: \"start\",\n            },\n          },\n          tooltips: {\n            enabled: false,\n          },\n          maintainAspectRatio: true,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true,\n                },\n                scaleLabel: {\n                  display: true,\n                  labelString: TemperatureType,\n                },\n              },\n            ],\n            xAxes: [\n              {\n                scaleLabel: {\n                  display: true,\n                  labelString: 'Time Over The Day'\n                },\n              },\n            ],\n          },\n        }}\n      />\n    </BarContainer>\n  );\n}\nconst BarContainer = styled.div`\n  margin: 20px;\n  align-self: stretch;\n  padding: 0 2%;\n`;\n","import React from 'react'\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport default function Loading() {\n    return (\n        <div className=\"spinner d-flex align-items-center\">\n            <h1>Loading...</h1> <br/>\n           <Spinner animation='border'/>\n        </div>\n    )\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchWeatherData } from \"./Store/actions\";\nimport Carousel from \"./Components/Carousel\";\nimport Toggel from \"./Components/Toggel\";\nimport BarChart from \"./Components/BarChart\";\nimport Loading from \"./LoadingPage\";\n\nfunction App() {\n  let dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchWeatherData());\n  }, []);\n  let data = useSelector((state) => state.data);\n  return (\n    <>\n      <div className=\"App\">\n        {data.length > 0 ? (\n          <>\n            <Toggel />\n            <Carousel data={data} />\n            <BarChart />\n          </>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import actionTypes from \"../Types\";\n\n let initialState = {\n   data: {},\n   CvsF:true,\n   recentDay:0,\n  err: \"\",\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_WEATHER_DATA_REQUEST:\n      return {\n        ...state,\n      };\n\n    case actionTypes.FETCH_WEATHER_DATA_SUCCESS:\n      return {\n        ...state,\n        data: action.data,\n      };\n    case actionTypes.TOGGLE_TEMPERATURE_TYPE:\n      return {\n        ...state,\n        CvsF: !state.CvsF,\n      };\n\n    case actionTypes.GET_SPECIFIC_DAY:\n      return {\n        ...state,\n        recentDay: action.recentDay,\n      };\n    case actionTypes.FETCH_WEATHER_DATA_FAILURE:\n      return {\n        ...state,\n        err: action.err,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./Store/reducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"chartjs-plugin-datalabels\";\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}